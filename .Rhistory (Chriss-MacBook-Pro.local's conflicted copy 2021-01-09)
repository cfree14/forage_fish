# Labels
labs(x="Predator abundance\n(# of males)", y="Predator production\n(# of males)") +
# Lines
geom_hline(yintercept=0, linetype="dotted", color="grey30") +
# Legend
scale_fill_gradientn(name="Prey\nabundance\n(1000s mt)", colors=RColorBrewer::brewer.pal(9, "YlOrRd")) +
guides(fill = guide_colorbar(ticks.colour = "black", frame.colour = "black", barheight = 1.5, barwidth = 0.5)) +
# Theme
theme_bw()  + my_theme +
theme(legend.position=c(0.8, 0.68),
legend.background = element_rect(fill=alpha('blue', 0)))
source('~/Dropbox/Chris/Rutgers/projects/forage_fish/code/figures/FigSX_fur_seal.R', echo=TRUE)
g3
# Merge plots
g <- gridExtra::grid.arrange(g1, g2, g3, ncol=3)
# Export plot
ggsave(g, filename=file.path(plotdir, "FigSX_fur_seal_walleye_polllock.png"),
width=6.5, height=2.25, units="in", dpi=600)
# Clear workspace
rm(list = ls())
# Setup
################################################################################
# Packages
library(tidyverse)
library(freeR)
library(grid)
library(gridExtra)
# Directories
datadir <- "data"
outputdir <- "output"
plotdir <- "figures"
# Read model estimates
load(file.path(datadir, "data_composite_final_sst.Rdata"))
data_orig <- data
rm(data)
View(data_orig)
# Build data
data <- data_orig %>%
group_by(stockid, stocklong) %>%
summarize(corr_prey1=corr(prey1_b, sst_c))
# Build data
data <- data_orig %>%
group_by(stockid, stocklong) %>%
summarize(corr_prey1=cor(prey1_b, sst_c))
# Build data
data <- data_orig %>%
group_by(stockid, stocklong) %>%
summarize(corr_prey1=cor(prey1_b, sst_c),
corr_preyC=cor(prey_b, sst_c))
View(data)
# Build data
data <- data_orig %>%
# Correlation between SST and prey
group_by(stockid, stocklong) %>%
summarize(corr_prey1=cor(prey1_b, sst_c),
corr_preyC=cor(prey_b, sst_c)) %>%
ungroup() %>%
# Gather
gather(key="type", value="correlation", 3:ncol(.))
View(data)
# Build data
data <- data_orig %>%
# Correlation between SST and prey
group_by(stockid, stocklong) %>%
summarize(corr_prey1=cor(prey1_b, sst_c),
corr_preyC=cor(prey_b, sst_c)) %>%
ungroup() %>%
# Gather
gather(key="type", value="correlation", 3:ncol(.)) %>%
mutate(type=recode(type,
"corr_prey1"="SST and primary prey",
"corr_preyC"="SST and composite prey"))
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_grid(~type) +
geom_hist() +
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_hist0gram() +
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram() +
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram() +
# Limits
lim(x=c(-1,1)) +
# Vertical
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram() +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations")
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram() +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Vertical
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram() +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(color="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(color="grey80", binwidth=0.05) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lim(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.01) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.025) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05) +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05, color="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05, fill="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw()
g
# My theme
my_theme <-  theme(axis.text=element_text(size=6),
axis.title=element_text(size=8),
legend.text=element_text(size=5),
legend.title=element_text(size=6),
strip.text=element_text(size=8),
plot.title=element_text(size=10),
# Gridlines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05, fill="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw() + my_theme
g
# Export plot
ggsave(g, filename=file.path(plotdir, "FigSX_prey_sst_correlation.png"),
width=4.5, height=2.5, units="in", dpi=600)
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.1, fill="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw() + my_theme
g
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05, fill="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw() + my_theme
g
View(data)
# Export plot
ggsave(g, filename=file.path(plotdir, "FigSX_prey_sst_correlation.png"),
width=4.5, height=2.5, units="in", dpi=600)
# My theme
my_theme <-  theme(axis.text=element_text(size=7),
axis.title=element_text(size=8),
strip.text=element_text(size=8),
plot.title=element_text(size=8),
# Gridlines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
# Plot data
g <- ggplot(data, aes(x=correlation)) +
facet_wrap(~type) +
geom_histogram(binwidth=0.05, fill="grey80") +
# Vertical guide
geom_vline(xintercept=0, color="grey30") +
# Limits
lims(x=c(-1,1)) +
# Labels
labs(x="Correlation", y="Number of predator populations") +
# Theme
theme_bw() + my_theme
g
# Export plot
ggsave(g, filename=file.path(plotdir, "FigSX_prey_sst_correlation.png"),
width=4.5, height=2.5, units="in", dpi=600)
# Clear workspace
rm(list = ls())
# Setup
################################################################################
# Packages
# devtools::install_github("kaskr/TMB_contrib_R/TMBhelper")
library(TMB)
library(TMBhelper)
library(tidyverse)
library(freeR)
library(reshape2)
# Directories
tmbdir <- "code/tmb_code"
datadir <- "data"
codedir <- "code"
outputdir <- "output"
# Read data
data_orig <- readRDS(file.path(datadir, "sim_data_for_power_analysis.Rds"))
# Helper functions
source(file.path(codedir, "helper_functions.R"))
# To do list
# Add scenario id
# Add stock id
# Eliminate stocks with negative biomass
# Standardize sim stock biomass and surplus production
# Format data
################################################################################
# Helper function
################################################################################
# Fit surplus production model
fit_sp <- function(dataset, dataset_name, p, covariate, covariate_name){
# 1. Format data
######################################
# Parameters
stocks <- unique(dataset$stockid)
nstocks <- length(stocks)
# 2. Fit production model
######################################
# Compile TMB code
# Only run once to compile code
# setwd(tmbdir)
if(FALSE){
dyn.unload(paste(tmbdir, dynlib("pella_prey_fixed"), sep="/"))
file.remove(paste(tmbdir, c("pella_prey_fixed.o", "pella_prey_fixed.dll"), sep="/"))
compile("pella_prey_fixed.cpp")
}
# Load TMB code
dyn.load(file.path(getwd(), tmbdir, dynlib("pella_prey_fixed")))
# Input data and parameter starting values
params <- list(ln_B0=rep(1.5, nstocks),
ln_r=rep(log(0.4), nstocks),
BetaT=rep(0.0, nstocks),
ln_sigmaP=rep(-2.5, nstocks)) # -3 before, -1.25 based on model fits
input.data <- list(Nstocks=nstocks,
Nobs=nrow(dataset),
p=p,
StockID=as.factor(dataset$stockid),
B_t=dataset$tb_sd,
P_t=dataset$sp_sd,
Prey_t=as.numeric(unlist(dataset[,covariate])))
# Initialization
model <- MakeADFun(data=input.data, parameters=params, DLL="pella_prey_fixed")
# model$control <- list(trace=1, parscale=rep(1,13), REPORT=1, reltol=1e-12, maxit=100)
# model$hessian <- F
# newtonOption(model, smartsearch=TRUE)
# Run model
output <- TMBhelper::fit_tmb(obj=model, lower=-Inf, upper=Inf, loopnum=3, newtonsteps=3, bias.correct=FALSE, getsd=FALSE)
# 3. Check fit
######################################
# Use hessian to diagnose fixed effects that might cause a problem
hess <- optimHess(par=output$par, fn=model$fn, gr=model$gr)
problem.vals <- which(eigen(hess)$values<0)
if(length(problem.vals)>0 ){
display <- eigen(hess)$vectors[,problem.vals]
names(display) = (output$diagnostics$Param)
cbind(1:length(output$par), output$par, display)
}
# Calculate SD
sd <- try(sdreport(model, hessian.fixed=hess))
# AIC of model
TMBhelper::TMBAIC(output)
# 4. Plot results
######################################
# Format output
results <- format_output(sd, stocks)
# Return results
return(results)
# # Plot results
# plot_ests(results)
# plot_thetas(results)
# 5. Export results
######################################
# Outfile name
# outfile <- paste0(dataset_name, "_pella_", "", format(p, nsmall=2), "p_fixed_", covariate_name, ".Rdata")
# Export model objects
# setwd("~/Dropbox/Chris/Rutgers/projects/forage_fish")
# save(data, stocks, nstocks,
#      input.data, params,
#      model, output, sd, hess, results,
#      file=paste(outputdir, outfile, sep="/"))
}
# Loop through scenario grid
x <- 1
# Reduce to data
theta_do <- scen_grid$theta[x]
sigma_do <- scen_grid$sigma[x]
iter_do <- scen_grid$iter[x]
scenario_id_do <- scen_grid$scenario_id[x]
sdata <- data_orig %>%
ungroup() %>%
filter(theta==theta_do & sigma==sigma_do & iter==iter_do) %>%
group_by(stockid) %>%
mutate(tb_sd=b_sim/max(b_sim, na.rm=T),
sp_sd=sp_sim/max(b_sim, na.rm=T)) %>%
ungroup()
# Remove problem stocks
problem_stocks <- sdata %>%
group_by(stockid) %>%
summarise(problem=any(b_sim <0)) %>%
filter(problem)
sdata <- sdata %>%
filter(!stockid%in%problem_stocks$stockid)
n_distinct(sdata$stockid)
# Try fitting model
sresults <- try(fit_sp(dataset = sdata, dataset_name = "sim", p=0.55,
covariate = "prey_b_sd", covariate_name = "cprey"))
library(tidyverse)
# Loop through scenario grid
x <- 1
# Reduce to data
theta_do <- scen_grid$theta[x]
sigma_do <- scen_grid$sigma[x]
iter_do <- scen_grid$iter[x]
scenario_id_do <- scen_grid$scenario_id[x]
sdata <- data_orig %>%
ungroup() %>%
filter(theta==theta_do & sigma==sigma_do & iter==iter_do) %>%
group_by(stockid) %>%
mutate(tb_sd=b_sim/max(b_sim, na.rm=T),
sp_sd=sp_sim/max(b_sim, na.rm=T)) %>%
ungroup()
theta_do
# Build scenario and iteration grid
scen_grid <- data_orig %>%
select(theta, sigma, iter, stockid) %>%
unique() %>%
group_by(theta, sigma, iter) %>%
summarize(nstocks=n()) %>%
mutate(scenario_id=paste(theta, sigma, iter, sep="_")) %>%
select(scenario_id, everything()) %>%
# filter(theta>0.25 & sigma!=0) %>%
filter(theta>0 & sigma>0) %>%
ungroup()
# Loop through scenario grid
x <- 1
# Reduce to data
theta_do <- scen_grid$theta[x]
sigma_do <- scen_grid$sigma[x]
iter_do <- scen_grid$iter[x]
scenario_id_do <- scen_grid$scenario_id[x]
sdata <- data_orig %>%
ungroup() %>%
filter(theta==theta_do & sigma==sigma_do & iter==iter_do) %>%
group_by(stockid) %>%
mutate(tb_sd=b_sim/max(b_sim, na.rm=T),
sp_sd=sp_sim/max(b_sim, na.rm=T)) %>%
ungroup()
# Remove problem stocks
problem_stocks <- sdata %>%
group_by(stockid) %>%
summarise(problem=any(b_sim <0)) %>%
filter(problem)
sdata <- sdata %>%
filter(!stockid%in%problem_stocks$stockid)
n_distinct(sdata$stockid)
# Try fitting model
sresults <- try(fit_sp(dataset = sdata, dataset_name = "sim", p=0.55,
covariate = "prey_b_sd", covariate_name = "cprey"))
